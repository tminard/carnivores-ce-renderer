# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following configuration:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      matrix:
        os: [windows-latest]
        build_type: [Release]
        c_compiler: [cl]
        cpp_compiler: [cl]

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "runtime-dir=${{ github.workspace }}/runtime" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
    
    - name: Prepare Windows Build
      if: matrix.os == 'windows-latest'
      run: |
        runtime_dir="${{ steps.strings.outputs.runtime-dir }}"
        build_output_dir="${{ steps.strings.outputs.build-output-dir }}\Release"
    
        echo "Runtime directory: $runtime_dir"
        echo "Build output directory: $build_output_dir"
    
        # Remove existing config.json if it exists
        if exist "$runtime_dir\config.json" (
          del "$runtime_dir\config.json"
        )
    
        # Rename config.json.example to config.json
        if exist "$runtime_dir\config.json.example" (
          ren "$runtime_dir\config.json.example" config.json
        )
    
        # Copy all runtime contents to the build output directory
        xcopy "$runtime_dir" "$build_output_dir" /s /e /y

    - name: Zip Windows Build
      if: matrix.os == 'windows-latest'
      run: |
        powershell Compress-Archive -Path ${{ steps.strings.outputs.build-output-dir }}\Release\* -DestinationPath ${{ steps.strings.outputs.build-output-dir }}\CarnivoresRenderer.zip

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        draft: false
        prerelease: false

    - name: Upload Windows Build
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.strings.outputs.build-output-dir }}\CarnivoresRenderer.zip
        asset_name: CarnivoresRenderer.zip
        asset_content_type: application/zip
